// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package eval

import (
	"context"
	"sync"
	"text/template"
)

// Ensure, that AddonMock does implement Addon.
// If this is not the case, regenerate this file with moq.
var _ Addon = &AddonMock{}

// AddonMock is a mock implementation of Addon.
//
// 	func TestSomethingThatUsesAddon(t *testing.T) {
//
// 		// make and configure a mocked Addon
// 		mockedAddon := &AddonMock{
// 			FuncsFunc: func(ctx context.Context) (template.FuncMap, error) {
// 				panic("mock out the Funcs method")
// 			},
// 			StringFunc: func() string {
// 				panic("mock out the String method")
// 			},
// 		}
//
// 		// use mockedAddon in code that requires Addon
// 		// and then make assertions.
//
// 	}
type AddonMock struct {
	// FuncsFunc mocks the Funcs method.
	FuncsFunc func(ctx context.Context) (template.FuncMap, error)

	// StringFunc mocks the String method.
	StringFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Funcs holds details about calls to the Funcs method.
		Funcs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// String holds details about calls to the String method.
		String []struct {
		}
	}
	lockFuncs  sync.RWMutex
	lockString sync.RWMutex
}

// Funcs calls FuncsFunc.
func (mock *AddonMock) Funcs(ctx context.Context) (template.FuncMap, error) {
	if mock.FuncsFunc == nil {
		panic("AddonMock.FuncsFunc: method is nil but Addon.Funcs was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockFuncs.Lock()
	mock.calls.Funcs = append(mock.calls.Funcs, callInfo)
	mock.lockFuncs.Unlock()
	return mock.FuncsFunc(ctx)
}

// FuncsCalls gets all the calls that were made to Funcs.
// Check the length with:
//     len(mockedAddon.FuncsCalls())
func (mock *AddonMock) FuncsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockFuncs.RLock()
	calls = mock.calls.Funcs
	mock.lockFuncs.RUnlock()
	return calls
}

// String calls StringFunc.
func (mock *AddonMock) String() string {
	if mock.StringFunc == nil {
		panic("AddonMock.StringFunc: method is nil but Addon.String was just called")
	}
	callInfo := struct {
	}{}
	mock.lockString.Lock()
	mock.calls.String = append(mock.calls.String, callInfo)
	mock.lockString.Unlock()
	return mock.StringFunc()
}

// StringCalls gets all the calls that were made to String.
// Check the length with:
//     len(mockedAddon.StringCalls())
func (mock *AddonMock) StringCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockString.RLock()
	calls = mock.calls.String
	mock.lockString.RUnlock()
	return calls
}
