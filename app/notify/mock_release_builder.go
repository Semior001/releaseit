// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package notify

import (
	"github.com/Semior001/releaseit/app/store"
	"sync"
)

// Ensure, that releaseBuilderMock does implement releaseBuilder.
// If this is not the case, regenerate this file with moq.
var _ releaseBuilder = &releaseBuilderMock{}

// releaseBuilderMock is a mock implementation of releaseBuilder.
//
//     func TestSomethingThatUsesreleaseBuilder(t *testing.T) {
//
//         // make and configure a mocked releaseBuilder
//         mockedreleaseBuilder := &releaseBuilderMock{
//             BuildFunc: func(changelog store.Changelog) (string, error) {
// 	               panic("mock out the Build method")
//             },
//         }
//
//         // use mockedreleaseBuilder in code that requires releaseBuilder
//         // and then make assertions.
//
//     }
type releaseBuilderMock struct {
	// BuildFunc mocks the Build method.
	BuildFunc func(changelog store.Changelog) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Build holds details about calls to the Build method.
		Build []struct {
			// Changelog is the changelog argument value.
			Changelog store.Changelog
		}
	}
	lockBuild sync.RWMutex
}

// Build calls BuildFunc.
func (mock *releaseBuilderMock) Build(changelog store.Changelog) (string, error) {
	if mock.BuildFunc == nil {
		panic("releaseBuilderMock.BuildFunc: method is nil but releaseBuilder.Build was just called")
	}
	callInfo := struct {
		Changelog store.Changelog
	}{
		Changelog: changelog,
	}
	mock.lockBuild.Lock()
	mock.calls.Build = append(mock.calls.Build, callInfo)
	mock.lockBuild.Unlock()
	return mock.BuildFunc(changelog)
}

// BuildCalls gets all the calls that were made to Build.
// Check the length with:
//     len(mockedreleaseBuilder.BuildCalls())
func (mock *releaseBuilderMock) BuildCalls() []struct {
	Changelog store.Changelog
} {
	var calls []struct {
		Changelog store.Changelog
	}
	mock.lockBuild.RLock()
	calls = mock.calls.Build
	mock.lockBuild.RUnlock()
	return calls
}
