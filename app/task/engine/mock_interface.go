// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package engine

import (
	"context"
	"github.com/Semior001/releaseit/app/task"
	"sync"
)

// Ensure, that InterfaceMock does implement Interface.
// If this is not the case, regenerate this file with moq.
var _ Interface = &InterfaceMock{}

// InterfaceMock is a mock implementation of Interface.
//
// 	func TestSomethingThatUsesInterface(t *testing.T) {
//
// 		// make and configure a mocked Interface
// 		mockedInterface := &InterfaceMock{
// 			GetFunc: func(ctx context.Context, id string) (task.Ticket, error) {
// 				panic("mock out the Get method")
// 			},
// 			ListFunc: func(ctx context.Context, ids []string) ([]task.Ticket, error) {
// 				panic("mock out the List method")
// 			},
// 		}
//
// 		// use mockedInterface in code that requires Interface
// 		// and then make assertions.
//
// 	}
type InterfaceMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id string) (task.Ticket, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, ids []string) ([]task.Ticket, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []string
		}
	}
	lockGet  sync.RWMutex
	lockList sync.RWMutex
}

// Get calls GetFunc.
func (mock *InterfaceMock) Get(ctx context.Context, id string) (task.Ticket, error) {
	if mock.GetFunc == nil {
		panic("InterfaceMock.GetFunc: method is nil but Interface.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedInterface.GetCalls())
func (mock *InterfaceMock) GetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *InterfaceMock) List(ctx context.Context, ids []string) ([]task.Ticket, error) {
	if mock.ListFunc == nil {
		panic("InterfaceMock.ListFunc: method is nil but Interface.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []string
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, ids)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedInterface.ListCalls())
func (mock *InterfaceMock) ListCalls() []struct {
	Ctx context.Context
	Ids []string
} {
	var calls []struct {
		Ctx context.Context
		Ids []string
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}
